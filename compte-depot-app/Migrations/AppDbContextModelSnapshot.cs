// <auto-generated />
using System;
using CompteDepotService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace compte_depot_app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompteDepotService.Models.CompteDepot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_creation");

                    b.Property<string>("NumeroCompte")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero_compte");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("solde");

                    b.Property<long?>("TauxInteretId")
                        .HasColumnType("bigint")
                        .HasColumnName("taux_interet_id");

                    b.HasKey("Id");

                    b.HasIndex("TauxInteretId");

                    b.ToTable("compte_depot");
                });

            modelBuilder.Entity("CompteDepotService.Models.InteretHistorique", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_transaction");

                    b.Property<decimal>("MontantInteret")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("montant_interet");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("interet_historique");
                });

            modelBuilder.Entity("CompteDepotService.Models.TauxInteret", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_debut");

                    b.Property<decimal>("Valeur")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("valeur");

                    b.HasKey("Id");

                    b.ToTable("taux_interet");
                });

            modelBuilder.Entity("CompteDepotService.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CompteDepotId")
                        .HasColumnType("bigint")
                        .HasColumnName("compte_depot_id");

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_transaction");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("montant");

                    b.Property<decimal>("SoldeApres")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("solde_apres");

                    b.Property<decimal>("SoldeAvant")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("solde_avant");

                    b.Property<long>("TypeOperationId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_operation_id");

                    b.HasKey("Id");

                    b.HasIndex("CompteDepotId");

                    b.HasIndex("TypeOperationId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("CompteDepotService.Models.TypeOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("libelle");

                    b.HasKey("Id");

                    b.ToTable("type_operation");
                });

            modelBuilder.Entity("CompteDepotService.Models.CompteDepot", b =>
                {
                    b.HasOne("CompteDepotService.Models.TauxInteret", "TauxInteret")
                        .WithMany()
                        .HasForeignKey("TauxInteretId");

                    b.Navigation("TauxInteret");
                });

            modelBuilder.Entity("CompteDepotService.Models.InteretHistorique", b =>
                {
                    b.HasOne("CompteDepotService.Models.Transaction", "Transaction")
                        .WithOne("InteretHistorique")
                        .HasForeignKey("CompteDepotService.Models.InteretHistorique", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CompteDepotService.Models.Transaction", b =>
                {
                    b.HasOne("CompteDepotService.Models.CompteDepot", "CompteDepot")
                        .WithMany("Transactions")
                        .HasForeignKey("CompteDepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompteDepotService.Models.TypeOperation", "TypeOperation")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompteDepot");

                    b.Navigation("TypeOperation");
                });

            modelBuilder.Entity("CompteDepotService.Models.CompteDepot", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CompteDepotService.Models.Transaction", b =>
                {
                    b.Navigation("InteretHistorique")
                        .IsRequired();
                });

            modelBuilder.Entity("CompteDepotService.Models.TypeOperation", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
